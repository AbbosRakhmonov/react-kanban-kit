{"version":3,"file":"useColumnDnd.es.js","sources":["../../../src/global/dnd/useColumnDnd.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { BoardItem, DndState } from \"@/components/types\";\nimport { withPrefix } from \"@/utils/getPrefix\";\nimport {\n  draggable,\n  dropTargetForElements,\n} from \"@atlaskit/pragmatic-drag-and-drop/element/adapter\";\nimport { setCustomNativeDragPreview } from \"@atlaskit/pragmatic-drag-and-drop/element/set-custom-native-drag-preview\";\nimport { preserveOffsetOnSource } from \"@atlaskit/pragmatic-drag-and-drop/element/preserve-offset-on-source\";\nimport { combine } from \"@atlaskit/pragmatic-drag-and-drop/combine\";\nimport { autoScrollForElements } from \"@atlaskit/pragmatic-drag-and-drop-auto-scroll/element\";\nimport { useKanbanContext } from \"@/context/KanbanContext\";\n\nexport type TColumnState =\n  | {\n      type: \"is-card-over\";\n      isOverChildCard: boolean;\n      dragging: DOMRect;\n    }\n  | {\n      type: \"is-column-over\";\n    }\n  | {\n      type: \"idle\";\n    }\n  | {\n      type: \"is-dragging\";\n    };\n\nconst isCardData = (data: any) => {\n  return data.type === \"card\";\n};\n\nconst isColumnData = (data: any) => {\n  return data.type === \"column\";\n};\n\nconst idle = { type: \"idle\" } as TColumnState;\n\nexport const useColumnDnd = (\n  data: BoardItem,\n  index: number,\n  items: BoardItem[],\n  onColumnDndStateChange?: (info: DndState) => void,\n) => {\n  const { viewOnly } = useKanbanContext();\n  const headerRef = useRef<HTMLDivElement>(null);\n  const outerFullHeightRef = useRef<HTMLDivElement | null>(null);\n  const innerRef = useRef<HTMLDivElement | null>(null);\n  const [state, setState] = useState<TColumnState>(idle);\n\n  const cardOverShadowCount =\n    state.type === \"is-card-over\" && !state.isOverChildCard ? 1 : 0;\n  const totalTasksCount = data.totalChildrenCount + cardOverShadowCount;\n\n  const setIsCardOver = useCallback(\n    ({ data, location }: { data: any; location: any }) => {\n      const innerMost = location.current.dropTargets[0];\n      const isOverChildCard = Boolean(innerMost?.data[\"card-drop-target\"]);\n\n      const proposed: TColumnState = {\n        type: \"is-card-over\",\n        dragging: data.rect,\n        isOverChildCard,\n      };\n\n      setState(proposed);\n    },\n    [],\n  );\n\n  const handleGenerateDragPreview = useCallback(\n    ({ location, nativeSetDragImage }) => {\n      setCustomNativeDragPreview({\n        nativeSetDragImage,\n        getOffset: preserveOffsetOnSource({\n          element: headerRef.current!,\n          input: location.current.input,\n        }),\n        render({ container }) {\n          const rect = innerRef.current!.getBoundingClientRect();\n          const preview = innerRef.current!.cloneNode(true) as HTMLElement;\n          if (!preview) return;\n\n          preview.style.width = `${rect.width}px`;\n          preview.style.height = `${rect.height}px`;\n          preview.style.transform = \"rotate(4deg)\";\n\n          container.appendChild(preview);\n        },\n      });\n    },\n    [],\n  );\n\n  const handleDragStart = useCallback(() => {\n    setState({ type: \"is-dragging\" });\n  }, []);\n\n  const handleDrop = useCallback(() => {\n    setState(idle);\n  }, []);\n\n  const handleDragEnter = useCallback(\n    ({ source, location }) => {\n      if (isCardData(source.data)) {\n        setIsCardOver({ data: source.data, location });\n        return;\n      }\n      if (isColumnData(source.data) && source.data.columnId !== data.id) {\n        setState({ type: \"is-column-over\" });\n      }\n    },\n    [data.id, setIsCardOver],\n  );\n\n  const handleDropTargetChange = useCallback(\n    ({ source, location }) => {\n      if (isCardData(source.data)) {\n        setIsCardOver({ data: source.data, location });\n        return;\n      }\n    },\n    [setIsCardOver],\n  );\n\n  const handleDragLeave = useCallback(\n    ({ source }) => {\n      if (isColumnData(source.data) && source.data.columnId === data.id) {\n        return;\n      }\n      setState(idle);\n    },\n    [data.id],\n  );\n\n  const canDrop = useCallback(({ source }) => {\n    return source.data.type === \"card\" || source.data.type === \"column\";\n  }, []);\n\n  const canScroll = useCallback(({ source }) => {\n    return source.data.type === \"card\";\n  }, []);\n\n  const getConfiguration = useCallback(() => {\n    return {\n      maxScrollSpeed: \"standard\" as const,\n    };\n  }, []);\n\n  useEffect(() => {\n    if (\n      !outerFullHeightRef.current ||\n      !innerRef.current ||\n      !headerRef.current\n    ) {\n      console.warn(\"not ready\");\n      return;\n    }\n\n    const scroller = outerFullHeightRef.current.querySelector(\n      `.${withPrefix(\"column-content-list\")}`,\n    );\n\n    const columnData = {\n      type: \"column\",\n      columnId: data.id,\n      column: data,\n      index,\n    };\n\n    return combine(\n      draggable({\n        element: headerRef.current,\n        getInitialData: () => columnData,\n        onGenerateDragPreview: handleGenerateDragPreview,\n        onDragStart: handleDragStart,\n        onDrop: handleDrop,\n        //TODO: add dnd in columns\n        canDrag: () => false,\n      }),\n      dropTargetForElements({\n        element: outerFullHeightRef.current,\n        getData: () => columnData,\n        canDrop,\n        getIsSticky: () => true,\n        onDragStart: ({ source, location }) => {\n          if (isCardData(source.data)) {\n            setIsCardOver({ data: source.data, location });\n          }\n        },\n        onDragEnter: handleDragEnter,\n        onDropTargetChange: handleDropTargetChange,\n        onDragLeave: handleDragLeave,\n        onDrop: handleDrop,\n      }),\n      autoScrollForElements({\n        canScroll,\n        getConfiguration,\n        element: scroller,\n      }),\n    );\n  }, [\n    data,\n    index,\n    items?.length,\n    handleGenerateDragPreview,\n    handleDragStart,\n    handleDrop,\n    canDrop,\n    setIsCardOver,\n    handleDragEnter,\n    handleDropTargetChange,\n    handleDragLeave,\n    canScroll,\n    getConfiguration,\n  ]);\n\n  useEffect(() => {\n    onColumnDndStateChange?.({ state, column: data });\n  }, [state, onColumnDndStateChange]);\n\n  return {\n    headerRef,\n    outerFullHeightRef,\n    innerRef,\n    state,\n    cardOverShadowCount,\n    totalTasksCount,\n  };\n};\n"],"names":["isCardData","data","type","isColumnData","idle","useColumnDnd","index","items","onColumnDndStateChange","useKanbanContext","headerRef","useRef","outerFullHeightRef","innerRef","state","setState","useState","cardOverShadowCount","isOverChildCard","totalTasksCount","totalChildrenCount","setIsCardOver","useCallback","location","innerMost","current","dropTargets","Boolean","proposed","dragging","rect","handleGenerateDragPreview","nativeSetDragImage","getOffset","preserveOffsetOnSource","element","input","render","container","getBoundingClientRect","preview","cloneNode","style","width","height","transform","appendChild","handleDragStart","handleDrop","handleDragEnter","source","columnId","id","handleDropTargetChange","handleDragLeave","canDrop","canScroll","getConfiguration","maxScrollSpeed","useEffect","console","warn","scroller","querySelector","withPrefix","columnData","column","combine","draggable","getInitialData","onGenerateDragPreview","onDragStart","onDrop","canDrag","dropTargetForElements","getData","getIsSticky","onDragEnter","onDropTargetChange","onDragLeave","autoScrollForElements","length"],"mappings":"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"}