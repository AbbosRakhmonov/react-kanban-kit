{"version":3,"file":"GenericItem.es.js","sources":["../../../src/components/GenericItem/GenericItem.tsx"],"sourcesContent":["import React from \"react\";\nimport { BoardItem, BoardProps, ConfigMap, DndState } from \"../types\";\nimport classNames from \"classnames\";\nimport { withPrefix } from \"@/utils/getPrefix\";\nimport CardSkeleton from \"../CardSkeleton\";\nimport Card from \"../Card\";\nimport DefaultCard from \"../DefaultCard\";\nimport { CardShadow } from \"../Card/Card\";\n\nconst isCardDraggable = (data: BoardItem, isTypeDraggable: boolean) => {\n  return data?.isDraggable !== undefined ? data?.isDraggable : isTypeDraggable;\n};\n\ninterface Props {\n  index: number;\n  options: {\n    data: BoardItem;\n    column: BoardItem;\n    configMap: ConfigMap;\n    //isSkeleton is used to show a skeleton UI when the item is not loaded yet\n    isSkeleton: boolean;\n    isShadow: boolean;\n    isListFooter: boolean;\n    renderListFooter?: (column: BoardItem) => React.ReactNode;\n    cardWrapperStyle?: (\n      card: BoardItem,\n      column: BoardItem,\n    ) => React.CSSProperties;\n    cardWrapperClassName?: string;\n    cardsGap?: number;\n    renderSkeletonCard?: BoardProps[\"renderSkeletonCard\"];\n    onCardDndStateChange?: (info: DndState) => void;\n    onCardClick?: (\n      e: React.MouseEvent<HTMLDivElement>,\n      card: BoardItem,\n    ) => void;\n    cardOverHeight?: number;\n    renderCardDragIndicator?: (card: BoardItem, info: any) => React.ReactNode;\n    renderCardDragPreview?: (card: BoardItem, info: any) => React.ReactNode;\n    renderGap?: (column: BoardItem) => React.ReactNode;\n  };\n}\n\nconst GenericItem = (props: Props) => {\n  const { index, options } = props;\n  const {\n    data,\n    column,\n    configMap,\n    isSkeleton,\n    cardWrapperStyle,\n    cardWrapperClassName,\n    cardsGap = 8,\n    isShadow,\n    isListFooter,\n    cardOverHeight = 90,\n    renderSkeletonCard,\n    onCardClick,\n    onCardDndStateChange,\n    renderCardDragIndicator,\n    renderListFooter,\n    renderGap,\n  } = options;\n\n  const { render = DefaultCard, isDraggable = true } =\n    configMap?.[data?.type] || {};\n\n  const wrapperClassName = classNames(\n    withPrefix(\"generic-item-wrapper\"),\n    cardWrapperClassName,\n  );\n\n  const renderCardContent = () => {\n    if (isListFooter)\n      return (\n        <div className={withPrefix(\"generic-item-list-footer\")}>\n          {renderListFooter?.(column) || \"Default Footer\"}\n        </div>\n      );\n    else if (isShadow)\n      return (\n        <CardShadow\n          height={cardOverHeight}\n          customIndicator={renderCardDragIndicator?.(data, {\n            height: cardOverHeight,\n          })}\n        />\n      );\n    else if (isSkeleton)\n      return (\n        <div\n          className={withPrefix(\"generic-item-skeleton\")}\n          data-index={index}\n          data-rkk-column={column?.id}\n        >\n          {renderSkeletonCard?.({ index, column }) || (\n            <CardSkeleton animationType=\"wave\" />\n          )}\n        </div>\n      );\n\n    return (\n      <Card\n        render={render}\n        isDraggable={isCardDraggable(data, isDraggable)}\n        data={data}\n        column={column}\n        index={index}\n        onClick={onCardClick}\n        cardsGap={cardsGap}\n        renderGap={renderGap}\n        onCardDndStateChange={onCardDndStateChange}\n        renderCardDragIndicator={renderCardDragIndicator}\n      />\n    );\n  };\n\n  return (\n    <div\n      className={wrapperClassName}\n      style={{\n        ...(cardWrapperStyle?.(data, column) || {}),\n      }}\n    >\n      {renderCardContent()}\n    </div>\n  );\n};\n\nexport default GenericItem;\n"],"names":["isCardDraggable","data","isTypeDraggable","isDraggable","undefined","GenericItem","props","index","options","column","configMap","isSkeleton","cardWrapperStyle","cardWrapperClassName","cardsGap","isShadow","isListFooter","cardOverHeight","renderSkeletonCard","onCardClick","onCardDndStateChange","renderCardDragIndicator","renderListFooter","renderGap","render","DefaultCard","type","wrapperClassName","classNames","withPrefix","renderCardContent","className","children","CardShadow","height","customIndicator","id","_jsx","CardSkeleton","animationType","Card","onClick","style"],"mappings":";;;;;;AASA,MAAMA,kBAAkBA,CAACC,MAAiBC,oBAA6B;AACrE,UAAOD,6BAAME,iBAAgBC,SAAYH,6BAAME,cAAcD;AAC/D;AAgCMG,MAAAA,cAAcA,CAACC,UAAiB;AAC9B,QAAA;AAAA,IAAEC;AAAAA,IAAOC;AAAAA,EAAYF,IAAAA;AACrB,QAAA;AAAA,IACJL;AAAAA,IACAQ;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC,WAAW;AAAA,IACXC;AAAAA,IACAC;AAAAA,IACAC,iBAAiB;AAAA,IACjBC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,EACEf,IAAAA;AAEE,QAAA;AAAA,IAAEgB,SAASC;AAAAA,IAAatB,cAAc;AAAA,EAC1CO,KAAAA,uCAAYT,6BAAMyB,UAAS,CAAA;AAE7B,QAAMC,mBAAmBC,WACvBC,WAAW,sBAAsB,GACjChB,oBACF;AAEA,QAAMiB,oBAAoBA,MAAM;AAC1Bd,QAAAA;AACF,iCACE,OAAA;AAAA,QAAKe,WAAWF,WAAW,0BAA0B;AAAA,QAAEG,WACpDV,qDAAmBb,YAAW;AAAA,MAAA,CAC5B;AAAA,aAEAM;AACP,iCACGkB,YAAU;AAAA,QACTC,QAAQjB;AAAAA,QACRkB,iBAAiBd,mEAA0BpB,MAAM;AAAA,UAC/CiC,QAAQjB;AAAAA,QAAAA;AAAAA,MACT,CACF;AAAA,aAEIN;AACP,iCACE,OAAA;AAAA,QACEoB,WAAWF,WAAW,uBAAuB;AAAA,QAC7C,cAAYtB;AAAAA,QACZ,mBAAiBE,iCAAQ2B;AAAAA,QAAGJ,WAE3Bd,yDAAqB;AAAA,UAAEX;AAAAA,UAAOE;AAAAA,QAAAA,OAC7B4B,oBAACC,cAAY;AAAA,UAACC,eAAc;AAAA,QAAA,CAAQ;AAAA,MAAA,CAEnC;AAGT,+BACGC,MAAI;AAAA,MACHhB;AAAAA,MACArB,aAAaH,gBAAgBC,MAAME,WAAW;AAAA,MAC9CF;AAAAA,MACAQ;AAAAA,MACAF;AAAAA,MACAkC,SAAStB;AAAAA,MACTL;AAAAA,MACAS;AAAAA,MACAH;AAAAA,MACAC;AAAAA,IAAAA,CACD;AAAA,EAAA;AAIL,6BACE,OAAA;AAAA,IACEU,WAAWJ;AAAAA,IACXe,OAAO;AAAA,MACL,IAAI9B,qDAAmBX,MAAMQ,YAAW,CAAC;AAAA,IAC3C;AAAA,IAAEuB,UAEDF,kBAAkB;AAAA,EAAA,CAChB;AAET;"}