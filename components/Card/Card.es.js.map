{"version":3,"file":"Card.es.js","sources":["../../../src/components/Card/Card.tsx"],"sourcesContent":["import { withPrefix } from \"@/utils/getPrefix\";\nimport React, { Fragment, memo, useMemo } from \"react\";\nimport { BoardItem, DndState } from \"../types\";\nimport { createPortal } from \"react-dom\";\nimport { TaskCardState, useCardDnd } from \"@/global/dnd/useCardDnd\";\n\nexport const CardShadow = memo(\n  ({\n    height,\n    customIndicator,\n  }: {\n    height: number;\n    customIndicator?: React.ReactNode;\n  }) => {\n    return (\n      <div className={withPrefix(\"card-shadow-container\")}>\n        {customIndicator || (\n          <div\n            className={withPrefix(\"card-shadow\")}\n            style={{ height: `${height - 2}px` }}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nconst CardDisplay = (props: {\n  outerRef?: React.RefObject<HTMLDivElement>;\n  innerRef?: React.RefObject<HTMLDivElement>;\n  state: TaskCardState;\n  data: BoardItem;\n  column: BoardItem;\n  index: number;\n  isDraggable: boolean;\n  render: (props: {\n    data: BoardItem;\n    column: BoardItem;\n    index: number;\n    isDraggable: boolean;\n  }) => React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>, card: BoardItem) => void;\n  cardsGap?: number;\n  renderCardDragIndicator?: (card: BoardItem, info: any) => React.ReactNode;\n  renderGap?: (column: BoardItem) => React.ReactNode;\n}) => {\n  const {\n    outerRef,\n    innerRef,\n    state,\n    data,\n    column,\n    index,\n    isDraggable,\n    cardsGap,\n    render,\n    onClick,\n    renderCardDragIndicator,\n    renderGap,\n  } = props;\n\n  const containerStyle = useMemo(() => {\n    const styles: React.CSSProperties = {};\n    if (state.type === \"is-dragging-and-left-self\") {\n      styles.display = \"none\";\n    }\n    return styles;\n  }, [state.type]);\n\n  const innerStyle = useMemo(() => {\n    if (state.type === \"is-dragging\") {\n      return { opacity: 0.6 };\n    }\n    if (state.type === \"preview\") {\n      return {\n        width: state.dragging.width,\n        height: state.dragging.height,\n        transform: \"rotate(4deg)\",\n      };\n    }\n    return {};\n  }, [state]);\n\n  const showTopShadow = state.type === \"is-over\" && state.closestEdge === \"top\";\n  const showBottomShadow =\n    state.type === \"is-over\" && state.closestEdge === \"bottom\";\n  const shadowHeight = state.type === \"is-over\" ? state.dragging.height : 0;\n  const renderContent = render({ data, column, index, isDraggable });\n  const customIndicator = renderCardDragIndicator?.(\n    state.type === \"is-dragging\" ? data : null,\n    {\n      height: shadowHeight,\n    },\n  );\n\n  return (\n    <Fragment>\n      <div\n        ref={outerRef}\n        className={withPrefix(\"card-outer\")}\n        onClick={(e) => onClick?.(e, data)}\n        style={{\n          ...containerStyle,\n          ...(cardsGap !== undefined ? { marginBottom: cardsGap } : {}),\n        }}\n        data-test-id={data.id}\n        data-rkk-column={column.id}\n        data-rkk-index={index}\n      >\n        {showTopShadow && (\n          <CardShadow height={shadowHeight} customIndicator={customIndicator} />\n        )}\n        <div\n          ref={innerRef}\n          className={withPrefix(\"card-inner\")}\n          style={{\n            ...innerStyle,\n            marginBottom: showBottomShadow ? cardsGap : 0,\n            marginTop: showTopShadow ? cardsGap : 0,\n          }}\n        >\n          {renderContent}\n        </div>\n        {showBottomShadow && (\n          <CardShadow height={shadowHeight} customIndicator={customIndicator} />\n        )}\n      </div>\n      {/* {renderGap?.(column)} */}\n    </Fragment>\n  );\n};\n\ninterface Props {\n  render: (props: {\n    data: BoardItem;\n    column: BoardItem;\n    index: number;\n    isDraggable: boolean;\n  }) => React.ReactNode;\n  data: BoardItem;\n  column: BoardItem;\n  index: number;\n  isDraggable: boolean;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>, card: BoardItem) => void;\n  cardsGap?: number;\n  renderGap?: (column: BoardItem) => React.ReactNode;\n  onCardDndStateChange?: (info: DndState) => void;\n  renderCardDragIndicator?: (card: BoardItem, info: any) => React.ReactNode;\n  renderCardDragPreview?: (card: BoardItem, info: any) => React.ReactNode;\n}\n\nconst Card = (props: Props) => {\n  const {\n    render,\n    data,\n    column,\n    index,\n    isDraggable,\n    cardsGap,\n    onClick,\n    onCardDndStateChange,\n    renderCardDragIndicator,\n    renderCardDragPreview,\n    renderGap,\n  } = props;\n  const { outerRef, innerRef, state } = useCardDnd(\n    data,\n    column,\n    index,\n    isDraggable,\n    onCardDndStateChange,\n  );\n\n  return (\n    <>\n      <CardDisplay\n        outerRef={outerRef}\n        innerRef={innerRef}\n        state={state}\n        data={data}\n        column={column}\n        index={index}\n        isDraggable={isDraggable}\n        render={render}\n        onClick={onClick}\n        cardsGap={cardsGap}\n        renderCardDragIndicator={renderCardDragIndicator}\n        renderGap={renderGap}\n      />\n\n      {state.type === \"preview\"\n        ? createPortal(\n            renderCardDragPreview?.(data, {\n              state,\n              data,\n              column,\n              index,\n              isDraggable,\n            }) || (\n              <CardDisplay\n                state={state}\n                data={data}\n                column={column}\n                index={index}\n                isDraggable={isDraggable}\n                render={render}\n              />\n            ),\n            state.container,\n          )\n        : null}\n    </>\n  );\n};\n\nexport default Card;\n"],"names":["CardShadow","memo","height","customIndicator","className","withPrefix","children","_jsx","style","CardDisplay","props","outerRef","innerRef","state","data","column","index","isDraggable","cardsGap","render","onClick","renderCardDragIndicator","renderGap","containerStyle","useMemo","styles","type","display","innerStyle","opacity","width","dragging","transform","showTopShadow","closestEdge","showBottomShadow","shadowHeight","renderContent","Fragment","ref","e","undefined","marginBottom","id","marginTop","Card","onCardDndStateChange","renderCardDragPreview","useCardDnd","_Fragment","createPortal","container"],"mappings":"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"}