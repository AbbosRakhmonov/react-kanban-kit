{"version":3,"file":"ColumnContent.es.js","sources":["../../../src/components/ColumnContent/ColumnContent.tsx"],"sourcesContent":["import { withPrefix } from \"@/utils/getPrefix\";\nimport React, { forwardRef, useEffect } from \"react\";\nimport {\n  BoardItem,\n  BoardProps,\n  ConfigMap,\n  DndState,\n  ScrollEvent,\n} from \"../types\";\nimport classNames from \"classnames\";\nimport { VList } from \"virtua\";\nimport GenericItem from \"../GenericItem\";\nimport { handleScroll } from \"@/utils/scroll\";\nimport { checkIfSkeletonIsVisible } from \"@/utils/infinite-scroll\";\nimport { useKanbanContext } from \"@/context/KanbanContext\";\n\ninterface ListProps {\n  column: BoardItem;\n  items: BoardItem[];\n  configMap: ConfigMap;\n  cardWrapperStyle?: (\n    card: BoardItem,\n    column: BoardItem,\n  ) => React.CSSProperties;\n  cardWrapperClassName?: string;\n  cardsGap?: number;\n  cardOverHeight?: number;\n  cardOverShadowCount?: number;\n  renderCardDragIndicator?: (card: BoardItem, info: any) => React.ReactNode;\n  renderCardDragPreview?: (card: BoardItem, info: any) => React.ReactNode;\n  onCardDndStateChange?: (info: DndState) => void;\n  renderSkeletonCard?: BoardProps[\"renderSkeletonCard\"];\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  onCardClick?: (e: React.MouseEvent<HTMLDivElement>, card: BoardItem) => void;\n  renderListFooter?: (column: BoardItem) => React.ReactNode;\n  renderGap?: (column: BoardItem) => React.ReactNode;\n}\n\nconst renderGenericItem = (\n  items: BoardItem[],\n  index: number,\n  column: BoardItem,\n  configMap: ConfigMap,\n  cardOverShadowCount: number,\n  renderListFooter: (column: BoardItem) => React.ReactNode,\n  props: any,\n  count: number,\n) => {\n  return (\n    <GenericItem\n      key={index}\n      index={index}\n      options={{\n        data: items[index],\n        column,\n        configMap,\n        isSkeleton: index >= items.length,\n        renderListFooter,\n        isShadow:\n          cardOverShadowCount && index === count - (renderListFooter ? 2 : 1),\n        isListFooter:\n          renderListFooter && index === count - (renderListFooter ? 1 : 0),\n        ...props,\n      }}\n    />\n  );\n};\n\nconst VirtualizedList = ({\n  column,\n  items,\n  configMap,\n  onScroll,\n  cardOverShadowCount,\n  renderListFooter,\n  ...props\n}: ListProps) => {\n  const count =\n    column?.totalChildrenCount +\n    cardOverShadowCount +\n    (renderListFooter ? 1 : 0);\n\n  return (\n    <VList\n      count={count}\n      onScroll={onScroll}\n      className={withPrefix(\"column-content-list\")}\n    >\n      {(index: number) =>\n        renderGenericItem(\n          items,\n          index,\n          column,\n          configMap,\n          cardOverShadowCount,\n          renderListFooter,\n          props,\n          count,\n        )\n      }\n    </VList>\n  );\n};\n\nconst NormalList = ({\n  column,\n  items,\n  configMap,\n  onScroll,\n  cardOverShadowCount,\n  renderListFooter,\n  ...props\n}: ListProps) => {\n  const count =\n    column?.totalChildrenCount +\n    cardOverShadowCount +\n    (renderListFooter ? 1 : 0);\n\n  return (\n    <div className={withPrefix(\"column-content-list\")} onScroll={onScroll}>\n      {Array.from(\n        {\n          length: count,\n        },\n        (_, index) =>\n          renderGenericItem(\n            items,\n            index,\n            column,\n            configMap,\n            cardOverShadowCount,\n            renderListFooter,\n            props,\n            count,\n          ),\n      )}\n    </div>\n  );\n};\n\ninterface Props {\n  items: BoardItem[];\n  column: BoardItem;\n  columnListContentStyle?: (column: BoardItem) => React.CSSProperties;\n  columnListContentClassName?: string;\n  configMap: ConfigMap;\n  renderSkeletonCard?: BoardProps[\"renderSkeletonCard\"];\n  cardWrapperStyle?: (\n    card: BoardItem,\n    column: BoardItem,\n  ) => React.CSSProperties;\n  cardWrapperClassName?: string;\n  onScroll?: (e: ScrollEvent, column: BoardItem) => void;\n  onCardClick?: (e: React.MouseEvent<HTMLDivElement>, card: BoardItem) => void;\n  loadMore?: (columnId: string) => void;\n  cardOverShadowCount?: number;\n  cardOverHeight?: number;\n  onCardDndStateChange?: (info: DndState) => void;\n  renderCardDragIndicator?: (card: BoardItem, info: any) => React.ReactNode;\n  renderCardDragPreview?: (card: BoardItem, info: any) => React.ReactNode;\n  renderListFooter?: (column: BoardItem) => React.ReactNode;\n  renderGap?: (column: BoardItem) => React.ReactNode;\n}\n\nconst ColumnContent = forwardRef<HTMLDivElement, Props>((props, ref) => {\n  const {\n    items,\n    column,\n    configMap,\n    columnListContentStyle,\n    columnListContentClassName,\n    cardWrapperStyle,\n    renderSkeletonCard,\n    cardWrapperClassName,\n    onCardClick,\n    loadMore,\n    cardOverShadowCount,\n    cardOverHeight,\n    onCardDndStateChange,\n    renderCardDragIndicator,\n    renderCardDragPreview,\n    renderListFooter,\n    renderGap,\n  } = props;\n  const {\n    virtualization = true,\n    cardsGap,\n    allowListFooter,\n  } = useKanbanContext();\n  const containerClassName = classNames(\n    withPrefix(\"column-content\"),\n    columnListContentClassName,\n  );\n\n  const onScroll = (e: ScrollEvent, column: BoardItem) => {\n    const isSkeletonVisible = checkIfSkeletonIsVisible({\n      columnId: column?.id,\n    });\n    if (isSkeletonVisible) loadMore?.(column?.id);\n    props?.onScroll?.(e, column);\n  };\n\n  const List = virtualization ? VirtualizedList : NormalList;\n\n  return (\n    <div\n      ref={ref}\n      className={containerClassName}\n      style={columnListContentStyle?.(column)}\n    >\n      <List\n        column={column}\n        items={items}\n        configMap={configMap}\n        cardWrapperStyle={cardWrapperStyle}\n        cardWrapperClassName={cardWrapperClassName}\n        cardsGap={cardsGap}\n        renderSkeletonCard={renderSkeletonCard}\n        onScroll={(e) => handleScroll(e, virtualization, onScroll, column)}\n        onCardClick={onCardClick}\n        cardOverShadowCount={cardOverShadowCount}\n        onCardDndStateChange={onCardDndStateChange}\n        renderCardDragIndicator={renderCardDragIndicator}\n        renderCardDragPreview={renderCardDragPreview}\n        cardOverHeight={cardOverHeight}\n        renderGap={renderGap}\n        renderListFooter={\n          (allowListFooter !== undefined && allowListFooter?.(column)) ||\n          allowListFooter === undefined\n            ? renderListFooter\n            : null\n        }\n      />\n    </div>\n  );\n});\n\nexport default ColumnContent;\n"],"names":["renderGenericItem","items","index","column","configMap","cardOverShadowCount","renderListFooter","props","count","GenericItem","options","data","isSkeleton","length","isShadow","isListFooter","VirtualizedList","onScroll","totalChildrenCount","VList","className","withPrefix","children","NormalList","Array","from","_","ColumnContent","forwardRef","ref","columnListContentStyle","columnListContentClassName","cardWrapperStyle","renderSkeletonCard","cardWrapperClassName","onCardClick","loadMore","cardOverHeight","onCardDndStateChange","renderCardDragIndicator","renderCardDragPreview","renderGap","virtualization","cardsGap","allowListFooter","useKanbanContext","containerClassName","classNames","e","isSkeletonVisible","checkIfSkeletonIsVisible","columnId","id","List","style","handleScroll","undefined"],"mappings":"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"}